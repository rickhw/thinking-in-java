---
# Main Application Secrets
# Note: In production, these should be created using kubectl or a secret management system
# The values shown here are base64 encoded placeholders and should be replaced
apiVersion: v1
kind: Secret
metadata:
  name: pgb4-secrets
  namespace: pgb4
  labels:
    app: pgb4
    component: secrets
type: Opaque
data:
  # Database credentials (base64 encoded)
  # These are placeholder values - replace with actual credentials
  database.username: cGdiNF91c2Vy  # pgb4_user
  database.password: cGdiNF9wYXNzd29yZA==  # pgb4_password
  
  # Database root credentials (for initialization)
  database.root.password: cm9vdF9wYXNzd29yZA==  # root_password
  
  # Application secrets
  jwt.secret: bXlfc3VwZXJfc2VjcmV0X2p3dF9rZXlfZm9yX3BnYjQ=  # my_super_secret_jwt_key_for_pgb4
  
  # Session secret
  session.secret: c2Vzc2lvbl9zZWNyZXRfa2V5X2Zvcl9wZ2I0  # session_secret_key_for_pgb4
  
  # Encryption key for sensitive data
  encryption.key: ZW5jcnlwdGlvbl9rZXlfZm9yX3BnYjQ=  # encryption_key_for_pgb4

---
# Database Secrets (separate for better security)
apiVersion: v1
kind: Secret
metadata:
  name: pgb4-database-secrets
  namespace: pgb4
  labels:
    app: pgb4-mysql
    component: database
type: Opaque
data:
  # MySQL credentials
  mysql-root-password: cm9vdF9wYXNzd29yZA==  # root_password
  mysql-user: cGdiNF91c2Vy  # pgb4_user
  mysql-password: cGdiNF9wYXNzd29yZA==  # pgb4_password
  mysql-database: cGdiNA==  # pgb4

---
# Redis Secrets (if using Redis)
apiVersion: v1
kind: Secret
metadata:
  name: pgb4-redis-secrets
  namespace: pgb4
  labels:
    app: pgb4-redis
    component: cache
type: Opaque
data:
  # Redis password
  redis-password: cmVkaXNfcGFzc3dvcmQ=  # redis_password

---
# TLS Secrets for Ingress (managed by cert-manager)
apiVersion: v1
kind: Secret
metadata:
  name: pgb4-tls-secret
  namespace: pgb4
  labels:
    app: pgb4
    component: tls
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
type: kubernetes.io/tls
data:
  # These will be populated by cert-manager
  tls.crt: ""
  tls.key: ""

---
# Management TLS Secret
apiVersion: v1
kind: Secret
metadata:
  name: pgb4-management-tls-secret
  namespace: pgb4
  labels:
    app: pgb4
    component: management-tls
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
type: kubernetes.io/tls
data:
  # These will be populated by cert-manager
  tls.crt: ""
  tls.key: ""

---
# Basic Auth Secret for Management Endpoints
apiVersion: v1
kind: Secret
metadata:
  name: pgb4-management-auth
  namespace: pgb4
  labels:
    app: pgb4
    component: management-auth
type: Opaque
data:
  # Basic auth credentials for management endpoints
  # Format: username:password (htpasswd format)
  # admin:admin123 (replace with secure credentials)
  auth: YWRtaW46JGFwcjEkSDZ1eDRIazAkWWJqVjJIWUxjNkVTdGJGa1Q5L1RmLg==

---
# External Service Secrets (if integrating with external services)
apiVersion: v1
kind: Secret
metadata:
  name: pgb4-external-secrets
  namespace: pgb4
  labels:
    app: pgb4
    component: external
type: Opaque
data:
  # SMTP credentials (if using email notifications)
  smtp.username: c210cF91c2VybmFtZQ==  # smtp_username
  smtp.password: c210cF9wYXNzd29yZA==  # smtp_password
  
  # OAuth credentials (if using OAuth)
  oauth.client.id: b2F1dGhfY2xpZW50X2lk  # oauth_client_id
  oauth.client.secret: b2F1dGhfY2xpZW50X3NlY3JldA==  # oauth_client_secret
  
  # API keys for external services
  api.key.service1: YXBpX2tleV9zZXJ2aWNlMQ==  # api_key_service1
  api.key.service2: YXBpX2tleV9zZXJ2aWNlMg==  # api_key_service2

---
# Monitoring Secrets (for Prometheus, Grafana, etc.)
apiVersion: v1
kind: Secret
metadata:
  name: pgb4-monitoring-secrets
  namespace: pgb4
  labels:
    app: pgb4
    component: monitoring
type: Opaque
data:
  # Grafana admin credentials
  grafana.admin.user: YWRtaW4=  # admin
  grafana.admin.password: Z3JhZmFuYV9hZG1pbl9wYXNzd29yZA==  # grafana_admin_password
  
  # Prometheus basic auth (if enabled)
  prometheus.user: cHJvbWV0aGV1cw==  # prometheus
  prometheus.password: cHJvbWV0aGV1c19wYXNzd29yZA==  # prometheus_password