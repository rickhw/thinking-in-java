---
# Main Application Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pgb4-ingress
  namespace: pgb4
  labels:
    app: pgb4
    component: ingress
  annotations:
    # Nginx Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "16m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    nginx.ingress.kubernetes.io/rate-limit-requests-per-minute: "300"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';" always;
    
    # Enable CORS for API endpoints
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Certificate management (cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - pgb4.example.com
    - api.pgb4.example.com
    secretName: pgb4-tls-secret
  rules:
  # Frontend routes
  - host: pgb4.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pgb4-frontend-service
            port:
              number: 80
      # API routes proxied to backend
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: pgb4-backend-service
            port:
              number: 8080
  
  # Dedicated API subdomain
  - host: api.pgb4.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pgb4-backend-service
            port:
              number: 8080

---
# Management/Monitoring Ingress (restricted access)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pgb4-management-ingress
  namespace: pgb4
  labels:
    app: pgb4
    component: management
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Restrict access to management endpoints
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
    # Basic auth for additional security
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: pgb4-management-auth
    nginx.ingress.kubernetes.io/auth-realm: "PGB4 Management Access"
    
    # Certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - management.pgb4.example.com
    secretName: pgb4-management-tls-secret
  rules:
  - host: management.pgb4.example.com
    http:
      paths:
      # Backend management endpoints
      - path: /actuator
        pathType: Prefix
        backend:
          service:
            name: pgb4-backend-service
            port:
              number: 8081
      # Health check endpoint (public)
      - path: /health
        pathType: Exact
        backend:
          service:
            name: pgb4-backend-service
            port:
              number: 8081

---
# Development/Staging Ingress (if needed)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pgb4-dev-ingress
  namespace: pgb4-dev
  labels:
    app: pgb4
    component: ingress
    environment: development
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "16m"
    
    # Development-specific settings
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Environment "development" always;
    
spec:
  ingressClassName: nginx
  rules:
  - host: dev.pgb4.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pgb4-frontend-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: pgb4-backend-service
            port:
              number: 8080