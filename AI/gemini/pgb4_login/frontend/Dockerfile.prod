# Production-optimized Dockerfile for PGB4 Message Board Frontend
# Includes additional security and performance optimizations

# Build stage with specific Node.js version for consistency
FROM node:18.19-alpine AS builder

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache dumb-init

# Create app user for build process
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy package files with proper ownership
COPY --chown=nextjs:nodejs package*.json ./

# Switch to app user for npm install
USER nextjs

# Install all dependencies (including dev dependencies needed for build)
RUN npm install --silent --no-audit --no-fund

# Copy source code with proper ownership
COPY --chown=nextjs:nodejs . .

# Build arguments for environment configuration
ARG BUILD_MODE=production
ARG VITE_API_BASE_URL
ARG VITE_APP_NAME="PGB4 Message Board"
ARG VITE_APP_VERSION="1.0.0"
ARG VITE_APP_ENV=production

# Set environment variables for build
ENV NODE_ENV=production
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}
ENV VITE_APP_NAME=${VITE_APP_NAME}
ENV VITE_APP_VERSION=${VITE_APP_VERSION}
ENV VITE_APP_ENV=${VITE_APP_ENV}

# Build the application
RUN npm run build:production

# Production stage with hardened Nginx
FROM nginx:1.25-alpine AS production

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache gettext dumb-init && \
    rm -rf /var/cache/apk/*

# Remove default nginx configuration and content
RUN rm -rf /etc/nginx/conf.d/default.conf /usr/share/nginx/html/*

# Create nginx user with specific UID/GID
RUN addgroup -g 1001 -S nginx-app && \
    adduser -S nginx-app -u 1001 -G nginx-app

# Copy nginx configuration template
COPY --chown=nginx-app:nginx-app nginx.conf.template /etc/nginx/templates/default.conf.template

# Copy built application from builder stage
COPY --from=builder --chown=nginx-app:nginx-app /app/dist /usr/share/nginx/html

# Set proper permissions for nginx directories
RUN chown -R nginx-app:nginx-app /usr/share/nginx/html && \
    chown -R nginx-app:nginx-app /var/cache/nginx && \
    chown -R nginx-app:nginx-app /var/log/nginx && \
    chown -R nginx-app:nginx-app /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx-app:nginx-app /var/run/nginx.pid

# Create optimized nginx configuration
RUN cat > /etc/nginx/nginx.conf << 'EOF'
user nginx-app;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;
    
    # Security headers (global)
    server_tokens off;
    
    # Include server configurations
    include /etc/nginx/conf.d/*.conf;
}
EOF

# Create startup script with enhanced error handling
RUN cat > /docker-entrypoint.sh << 'EOF'
#!/bin/sh
set -e

echo "Starting PGB4 Frontend container..."

# Default backend URL if not provided
export BACKEND_URL=${BACKEND_URL:-"http://backend:8080"}

echo "Backend URL: ${BACKEND_URL}"

# Validate required environment variables
if [ -z "${BACKEND_URL}" ]; then
    echo "ERROR: BACKEND_URL environment variable is required"
    exit 1
fi

# Substitute environment variables in nginx config
echo "Configuring nginx with environment variables..."
envsubst '${BACKEND_URL}' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf

# Validate nginx configuration
echo "Validating nginx configuration..."
nginx -t

# Remove template file for security
rm -f /etc/nginx/templates/default.conf.template

echo "Starting nginx..."
exec dumb-init nginx -g "daemon off;"
EOF

# Make startup script executable
RUN chmod +x /docker-entrypoint.sh

# Switch to non-root user
USER nginx-app

# Expose port
EXPOSE 80

# Health check with more comprehensive validation
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider --timeout=5 http://localhost:80/health || exit 1

# Labels for better container management
LABEL maintainer="PGB4 Team" \
      version="1.0.0" \
      description="PGB4 Message Board Frontend" \
      org.opencontainers.image.source="https://github.com/your-org/pgb4-frontend"

# Set entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]