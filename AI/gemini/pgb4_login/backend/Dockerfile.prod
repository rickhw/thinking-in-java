# Production-optimized multi-stage Dockerfile for Spring Boot backend
# Stage 1: Build stage with cache optimization
FROM openjdk:17-jdk-slim AS builder

# Install necessary tools
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy gradle wrapper and build files first (for better caching)
COPY gradlew .
COPY gradle gradle
COPY build.gradle .
COPY settings.gradle .

# Make gradlew executable
RUN chmod +x ./gradlew

# Download dependencies (this layer will be cached if dependencies don't change)
RUN ./gradlew dependencies --no-daemon

# Copy source code
COPY src src

# Build the application with optimizations
RUN ./gradlew build -x test --no-daemon --build-cache

# Stage 2: Minimal runtime stage
FROM openjdk:17-jre-slim AS runtime

# Install only essential tools
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl dumb-init && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

# Create non-root user with specific UID/GID for security
RUN groupadd -r -g 1001 pgb4 && useradd -r -u 1001 -g pgb4 pgb4

# Set working directory
WORKDIR /app

# Create directories with proper permissions
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R pgb4:pgb4 /app

# Copy the built JAR from builder stage
COPY --from=builder --chown=pgb4:pgb4 /app/build/libs/*.jar app.jar

# Switch to non-root user
USER pgb4

# Expose the application port
EXPOSE 8080

# Enhanced health check with startup delay
HEALTHCHECK --interval=30s --timeout=15s --start-period=90s --retries=3 \
    CMD curl -f http://localhost:8080/health/live || exit 1

# Production JVM optimization
ENV JAVA_OPTS="-server \
    -Xms512m \
    -Xmx1024m \
    -XX:+UseG1GC \
    -XX:+UseContainerSupport \
    -XX:MaxRAMPercentage=75.0 \
    -XX:+OptimizeStringConcat \
    -XX:+UseStringDeduplication \
    -XX:+ExitOnOutOfMemoryError \
    -Djava.security.egd=file:/dev/./urandom \
    -Djava.awt.headless=true"

# Production application environment
ENV SPRING_PROFILES_ACTIVE=prod
ENV SERVER_PORT=8080
ENV LOG_LEVEL=WARN
ENV APP_LOG_LEVEL=INFO
ENV JPA_SHOW_SQL=false
ENV JPA_DDL_AUTO=validate

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]